/* 
 * ProjektAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Weather
    /// </summary>
    [DataContract]
        public partial class Weather :  IEquatable<Weather>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Weather" /> class.
        /// </summary>
        /// <param name="idWeather">idWeather.</param>
        /// <param name="date">date.</param>
        /// <param name="temperature">temperature.</param>
        /// <param name="presure">presure.</param>
        /// <param name="cloudCover">cloudCover.</param>
        /// <param name="rainFall">rainFall.</param>
        public Weather(int? idWeather = default(int?), DateTime? date = default(DateTime?), float? temperature = default(float?), float? presure = default(float?), float? cloudCover = default(float?), float? rainFall = default(float?))
        {
            this.IdWeather = idWeather;
            this.Date = date;
            this.Temperature = temperature;
            this.Presure = presure;
            this.CloudCover = cloudCover;
            this.RainFall = rainFall;
        }
        
        /// <summary>
        /// Gets or Sets IdWeather
        /// </summary>
        [DataMember(Name="idWeather", EmitDefaultValue=false)]
        public int? IdWeather { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public float? Temperature { get; set; }

        /// <summary>
        /// Gets or Sets Presure
        /// </summary>
        [DataMember(Name="presure", EmitDefaultValue=false)]
        public float? Presure { get; set; }

        /// <summary>
        /// Gets or Sets CloudCover
        /// </summary>
        [DataMember(Name="cloudCover", EmitDefaultValue=false)]
        public float? CloudCover { get; set; }

        /// <summary>
        /// Gets or Sets RainFall
        /// </summary>
        [DataMember(Name="rainFall", EmitDefaultValue=false)]
        public float? RainFall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Weather {\n");
            sb.Append("  IdWeather: ").Append(IdWeather).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  Presure: ").Append(Presure).Append("\n");
            sb.Append("  CloudCover: ").Append(CloudCover).Append("\n");
            sb.Append("  RainFall: ").Append(RainFall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Weather);
        }

        /// <summary>
        /// Returns true if Weather instances are equal
        /// </summary>
        /// <param name="input">Instance of Weather to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Weather input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdWeather == input.IdWeather ||
                    (this.IdWeather != null &&
                    this.IdWeather.Equals(input.IdWeather))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.Presure == input.Presure ||
                    (this.Presure != null &&
                    this.Presure.Equals(input.Presure))
                ) && 
                (
                    this.CloudCover == input.CloudCover ||
                    (this.CloudCover != null &&
                    this.CloudCover.Equals(input.CloudCover))
                ) && 
                (
                    this.RainFall == input.RainFall ||
                    (this.RainFall != null &&
                    this.RainFall.Equals(input.RainFall))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdWeather != null)
                    hashCode = hashCode * 59 + this.IdWeather.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.Presure != null)
                    hashCode = hashCode * 59 + this.Presure.GetHashCode();
                if (this.CloudCover != null)
                    hashCode = hashCode * 59 + this.CloudCover.GetHashCode();
                if (this.RainFall != null)
                    hashCode = hashCode * 59 + this.RainFall.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
